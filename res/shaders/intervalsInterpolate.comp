#version 450

#include "constants.glsl"
#include "utils.glsl"

// #define WRITE_DEBUG

layout (local_size_x=32, local_size_y=32, local_size_z=1) in;

layout(set=0, binding=0) uniform MainViewDataCompute {
    mat4 invView;
    mat4 invProj;
    vec2 res;
    vec2 viewsTotalRes;
    int viewCnt;
} ubo;

layout(std430, set=0, binding=1) readonly buffer ssbo {
    ViewDataEvalCompute objects[];
} cssbo;

layout(set=0, binding=3) uniform sampler2D viewImagesSampler;

layout(set=0, binding=4) uniform writeonly image2D novelImageSampler;

layout(std430, set=0, binding=5) buffer ssbo1 {
    FrustumHit objects[];
} cssboHits;

layout(std430, set=0, binding=5) readonly buffer ssbo2 {
    int objects[];
} cssboHitsCount;


void main()
{
    vec2 origPixId = gl_GlobalInvocationID.xy * vec2(INTERPOLATE_PIXELS_X, INTERPOLATE_PIXELS_Y);

    if (origPixId.x < ubo.res.x && origPixId.y < ubo.res.y)
    {
        vec2 pixCenter = origPixId + vec2(float(INTERPOLATE_PIXELS_X) / 2, float(INTERPOLATE_PIXELS_Y) / 2);

        vec2 uv = pixCenter / ubo.res;
        vec2 d = uv * 2.0 - 1.0;

        vec4 target = ubo.invProj * vec4(d.x, d.y, 1.f, 1.f);

        vec3 org = (ubo.invView * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
        vec3 dir = (ubo.invView * vec4(normalize(target.xyz), 0.f)).xyz;

        int linearId = int((ubo.res.x * origPixId.y) + origPixId.x);
        int hitsStartId = linearId * 2 * MAX_HITS;
        int intersectCount = cssboHitsCount.objects[linearId];

        IntervalHit maxInterval;
        bool maxFound = false;
        int maxInInterval = 0;
        int currentlyInInterval = 0;
        uint cameraIndexMask[INTS_FOR_ENCODING];
        for (int i = 0; i < INTS_FOR_ENCODING; i++)
        {
            cameraIndexMask[i] = 0;
        }
        float currentStartT = -1;

        FrustumHit hitIn;
        FrustumHit hitOut;
        int inId = 0;
        int outId = 0;
        for (int i = 0; i < intersectCount * 2; i++)
        {
            hitIn = cssboHits.objects[hitsStartId + min(inId, (intersectCount - 1))];
            hitOut = cssboHits.objects[hitsStartId + MAX_HITS + outId];

            if (hitIn.t <= hitOut.t && inId < intersectCount)
            {
                // add into interval
                currentlyInInterval++;

                addToMask(cameraIndexMask, hitIn.viewId);

                currentStartT = hitIn.t;

                inId++;
            }
            else if (hitIn.t > hitOut.t || inId >= intersectCount)
            {
                if (currentlyInInterval >= MIN_INTERVAL_VIEWS &&
                    currentlyInInterval > maxInInterval)
                {
                    maxInterval.t = vec2(currentStartT, hitOut.t);
                    maxInterval.idBits = cameraIndexMask;
                    maxFound = true;
                    maxInInterval = currentlyInInterval;
                }

                currentlyInInterval--;

                removeFromMask(cameraIndexMask, hitOut.viewId);

                if (cssboHits.objects[hitsStartId + inId - 1].viewId == hitOut.viewId)
                {
                    for (int j = inId - 2; j >= 0; j--)
                    {
                        if (isInMask(j, cameraIndexMask))
                        {
                            currentStartT = cssboHits.objects[hitsStartId + j].t;
                            break;
                        }
                    }
                }

                outId++;
            }
        }
        
         
        if (maxFound)
        {
            float dist = 20;
            vec4 avg = vec4(0);
            float sampleDist = (maxInterval.t.y - maxInterval.t.x) / RAY_PIX_SAMPLES;
            float segmentStart = maxInterval.t.x;

            for (int j = 0; j < RAY_PIX_SAMPLES; j++)
            {
                vec3 p = org + dir * (segmentStart + j * sampleDist);

                vec4 localMin = vec4(2);
                vec4 localMax = vec4(-1);
                vec4 localAvg = vec4(0);

                int numOfViews = 0;

                for (int k = 0; k < ubo.viewCnt; k++)
                {
                    if (isInMask(k, maxInterval.idBits))
                    {
                        ViewDataEvalCompute currentView = cssbo.objects[k];

                        vec2 pixId = calculatePixId(p, currentView.view, 
                            currentView.proj, currentView.resOffset.xy, 
                            currentView.resOffset.zw);
                        vec2 pixIdNorm = pixId / ubo.viewsTotalRes;

                        vec4 pixVal = texture(viewImagesSampler, pixIdNorm);

                        localMin = min(localMin, pixVal);
                        localMax = max(localMax, pixVal);

                        localAvg += pixVal;

                        numOfViews++;
                    }
                }

                localAvg /= float(numOfViews);

                vec4 localVecDist = localMax - localMin;
                float localDist = localVecDist.x + localVecDist.y + localVecDist.z + localVecDist.w;

                if (localDist < dist)
                {
                    dist = localDist;
                    avg = localAvg;//localMin + localVecDist / 2;
                }
            }

            for (int x = 0; x < INTERPOLATE_PIXELS_X; x++)
            {
                for (int y = 0; y < INTERPOLATE_PIXELS_Y; y++)
                {
                    imageStore(novelImageSampler, ivec2(origPixId + vec2(x, y)), avg);
                }
            }
        }
        else
        {
            for (int x = 0; x < INTERPOLATE_PIXELS_X; x++)
            {
                for (int y = 0; y < INTERPOLATE_PIXELS_Y; y++)
                {
                    imageStore(novelImageSampler, ivec2(origPixId + vec2(x, y)), vec4(0, 0, 1, 1));
                }
            }
        }
    }
}