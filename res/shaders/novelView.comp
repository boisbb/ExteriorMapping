#version 450

#include "constants.glsl"
#include "macros.glsl"

// #define WRITE_DEBUG

layout (local_size_x=32, local_size_y=32, local_size_z=1) in;

layout(set=0, binding=0) uniform RayEvalUniformBuffer {
    mat4 invView;
    mat4 invProj;
    vec2 res;
    vec2 viewsTotalRes;
    int viewCnt;
    uint samplingType;
    bool testPixel;
    vec2 testedPixel;
    int numOfRaySamples;
    bool automaticSampleCount;
} ubo;

layout(std430, set=0, binding=1) readonly buffer ssbo {
    ViewDataEvalCompute objects[];
} cssbo;


layout(set=0, binding=3) uniform sampler2D viewImagesSampler;

layout(set=0, binding=4) uniform sampler2D viewImagesDepthSampler;

layout(set=0, binding=5) uniform writeonly image2D novelImage;

layout(set=0, binding=6) uniform writeonly image2D testPixelImage;

#ifdef WRITE_DEBUG
layout(std430, set=0, binding=2) writeonly buffer ssbo1 {
    ViewEvalDebugCompute objects[];
} cssboDebug;
#endif

void main()
{
    vec2 origPixId = gl_GlobalInvocationID.xy * vec2(INTERPOLATE_PIXELS_X, INTERPOLATE_PIXELS_Y);

    if (origPixId.x >= ubo.res.x && origPixId.y >= ubo.res.y)
    {
        return;
    }

    vec2 pixCenter = origPixId + vec2(float(INTERPOLATE_PIXELS_X) / 2, float(INTERPOLATE_PIXELS_Y) / 2);
    vec2 uv = pixCenter / ubo.res;
    vec2 d = uv * 2.0 - 1.0;

    vec4 from = ubo.invProj * vec4(d.x, d.y, 0.f, 1.f);
    vec4 target = ubo.invProj * vec4(d.x, d.y, 1.f, 1.f);

    from /= from.w;
    target /= target.w;

    vec3 org = (ubo.invView * vec4(from)).xyz;
    vec3 dir = (ubo.invView * vec4(normalize(target.xyz), 0.f)).xyz;

    FrustumHit frustumHitsIn[MAX_HITS];
    FrustumHit frustumHitsOut[MAX_HITS];
    int intersectCount = 0;

    FIND_INTERSECTS(frustumHitsIn, frustumHitsOut, ubo, cssbo, org, dir);

    INSERT_SORT(frustumHitsIn, intersectCount);
    INSERT_SORT(frustumHitsOut, intersectCount);

    IntervalHit maxInterval;  
    FIND_MAX_INTERVAL(maxInterval, frustumHitsIn, frustumHitsOut, intersectCount);   
    
    if (maxInterval.count > 0)
    {
        vec4 finalColor = vec4(0);
        bool evaluateColor = true;

        int sampleCount = ubo.numOfRaySamples;

        if (ubo.automaticSampleCount == true)
        {
            CHOOSE_SAMPLE_COUNT(ubo, cssbo, org, dir, maxInterval, sampleCount);
        }

        if (ubo.samplingType == SAMPLE_COLOR)
        {
            EVALUATE_AND_SAMPLE_COLOR(org, dir, maxInterval, finalColor, float(sampleCount));
        }
        else
        {
            if (ubo.testPixel == true && ubo.testedPixel.x == origPixId.x && ubo.testedPixel.y == origPixId.y)
            {
                EVALUATE_AND_SAMPLE_DEPTH_DIST_TEST_PIXEL(org, dir, maxInterval, finalColor, ubo.samplingType, testPixelImage, float(sampleCount));
            }
            else
            {
                EVALUATE_AND_SAMPLE_DEPTH_DIST(org, dir, maxInterval, finalColor, ubo.samplingType, float(sampleCount));
            }
        }

        WRITE_TO_IMAGE(origPixId, novelImage, finalColor);

    }
    else
    {
        WRITE_TO_IMAGE(origPixId, novelImage, vec4(0, 0, 1, 1));
    }

#ifdef WRITE_DEBUG
    int linearRes = int((ubo.res.x * origPixId.y) + origPixId.x);

    cssboDebug.objects[linearRes].numOfIntersections = intersectCount;
    cssboDebug.objects[linearRes].numOfFoundIntervals = 0;
    cssboDebug.objects[linearRes].viewRes = min(vec2(0.2, 1.0), vec2(0.5, 0.8));

    ViewDataEvalCompute currentView = cssbo.objects[0];

    vec2 uv1 = vec2(currentView.resOffset.xy / 2) / ubo.viewsTotalRes;
    vec2 d1 = uv1 * 2.0 - 1.0;

    float n = currentView.nearFar.x;
    float f = currentView.nearFar.y;
    float z = texture(viewImagesDepthSampler, uv1).r;
    // z = z * 2.0 - 1.0;

    vec4 clipPoint = vec4(d1, z, 1.0);
    vec4 viewPoint = currentView.invProj * clipPoint;
    viewPoint /= viewPoint.w;

    vec4 worldPoint = currentView.invView * viewPoint;


    cssboDebug.objects[linearRes].pointInWSpace = vec4(worldPoint);
#endif
}