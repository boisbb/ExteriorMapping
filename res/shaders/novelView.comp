#version 450

#include "constants.glsl"
#include "macros.glsl"

// #define WRITE_DEBUG

layout (local_size_x=32, local_size_y=32, local_size_z=1) in;

layout(set=0, binding=0) uniform MainViewDataCompute {
    mat4 invView;
    mat4 invProj;
    vec2 res;
    vec2 viewsTotalRes;
    int viewCnt;
} ubo;

layout(std430, set=0, binding=1) readonly buffer ssbo {
    ViewDataEvalCompute objects[];
} cssbo;


layout(set=0, binding=3) uniform sampler2D viewImagesSampler;

layout(set=0, binding=4) uniform sampler2D viewImagesDepthSampler;

layout(set=0, binding=5) uniform writeonly image2D novelImageSampler;

#ifdef WRITE_DEBUG
layout(std430, set=0, binding=2) writeonly buffer ssbo1 {
    ViewEvalDebugCompute objects[];
} cssboDebug;
#endif

void main()
{
    vec2 origPixId = gl_GlobalInvocationID.xy * vec2(INTERPOLATE_PIXELS_X, INTERPOLATE_PIXELS_Y);

    if (origPixId.x < ubo.res.x && origPixId.y < ubo.res.y)
    {
        vec2 pixCenter = origPixId + vec2(float(INTERPOLATE_PIXELS_X) / 2, float(INTERPOLATE_PIXELS_Y) / 2);
        vec2 uv = pixCenter / ubo.res;
        vec2 d = uv * 2.0 - 1.0;

        vec4 from = ubo.invProj * vec4(d.x, d.y, 0.f, 1.f);
        vec4 target = ubo.invProj * vec4(d.x, d.y, 1.f, 1.f);

        vec3 org = (ubo.invView * vec4(from.xyz, 1.0)).xyz;
        vec3 dir = (ubo.invView * vec4(normalize(target.xyz), 0.f)).xyz;

        FrustumHit frustumHitsIn[MAX_HITS];
        FrustumHit frustumHitsOut[MAX_HITS];
        int intersectCount = 0;

        FIND_INTERSECTS(frustumHitsIn, frustumHitsOut, ubo, cssbo, org, dir);

        INSERT_SORT(frustumHitsIn, intersectCount);
        INSERT_SORT(frustumHitsOut, intersectCount);

        IntervalHit maxInterval;  
        FIND_MAX_INTERVAL(maxInterval, frustumHitsIn, frustumHitsOut, intersectCount);   
         
        if (maxInterval.count > 0)
        {
            vec4 finalColor = vec4(0);
            bool evaluateColor = true;

            if (evaluateColor)
            {
                EVALUATE_AND_SAMPLE_COLOR(maxInterval, finalColor);
            }
            else
            {
                float sampleDist = (maxInterval.t.y - maxInterval.t.x) / RAY_PIX_SAMPLES;
                float segmentStart = maxInterval.t.x;
                
                vec3 startP = org + dir * maxInterval.t.x;
                vec3 endP = org + dir * maxInterval.t.y;

                float minDist = 1.0 / 0.0;
                for (int j = 0; j < RAY_PIX_SAMPLES; j++)
                {
                    vec3 p = org + dir * (segmentStart + j * sampleDist);
                    
                    vec4 colorAcc = vec4(0.0);
                    float pointLineDistAcc = 0;

                    for (int k = 0; k < ubo.viewCnt; k++)
                    {
                        bool result = false;
                        IS_IN_MASK(k, maxInterval.idBits, result);
                        if (result)
                        {
                            ViewDataEvalCompute currentView = cssbo.objects[k];

                            vec2 pixId = vec2(0.0);
                            vec2 dView = vec2(0.0);
                            CALCULATE_PIX_ID_D(p, currentView.view,  currentView.proj,
                                currentView.resOffset.xy, currentView.resOffset.zw,
                                pixId, dView);
                            
                            vec2 uvView = pixId / ubo.viewsTotalRes;

                            float n = currentView.nearFar.x;
                            float f = currentView.nearFar.y;
                            float z = texture(viewImagesDepthSampler, uvView).r;

                            vec4 clipPoint = vec4(dView, z, 1.0);
                            vec4 viewPoint = currentView.invProj * clipPoint;
                            viewPoint /= viewPoint.w;

                            vec3 worldPoint = (currentView.invView * viewPoint).xyz;

                            float pointLineDist = 1.0 / 0.0;
                            POINT_TO_LINE_DIST(worldPoint, startP, endP, pointLineDist);

                            pointLineDistAcc += pointLineDist;
                            colorAcc += texture(viewImagesSampler, uvView);
                        }
                    }

                    if (pointLineDistAcc < minDist)
                    {
                        minDist = pointLineDistAcc;
                        finalColor = colorAcc / maxInterval.count;
                    }
                }
                // TODO: here continue.
            }

            WRITE_TO_IMAGE(origPixId, novelImageSampler, finalColor);
        }
        else
        {
            WRITE_TO_IMAGE(origPixId, novelImageSampler, vec4(0, 0, 1, 1));
        }

#ifdef WRITE_DEBUG
        int linearRes = int((ubo.res.x * origPixId.y) + origPixId.x);

        cssboDebug.objects[linearRes].numOfIntersections = intersectCount;
        cssboDebug.objects[linearRes].numOfFoundIntervals = 0;
        cssboDebug.objects[linearRes].viewRes = min(vec2(0.2, 1.0), vec2(0.5, 0.8));

        ViewDataEvalCompute currentView = cssbo.objects[0];

        vec2 uv1 = vec2(currentView.resOffset.xy / 2) / ubo.viewsTotalRes;
        vec2 d1 = uv1 * 2.0 - 1.0;

        float n = currentView.nearFar.x;
        float f = currentView.nearFar.y;
        float z = texture(viewImagesDepthSampler, uv1).r;
        // z = z * 2.0 - 1.0;

        vec4 clipPoint = vec4(d1, z, 1.0);
        vec4 viewPoint = currentView.invProj * clipPoint;
        viewPoint /= viewPoint.w;

        vec4 worldPoint = currentView.invView * viewPoint;


        cssboDebug.objects[linearRes].pointInWSpace = vec4(worldPoint);
#endif
        
    }
}