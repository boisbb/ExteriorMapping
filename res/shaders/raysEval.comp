#version 450

#define MAX_VIEWS 128
#define MAX_INTERVALS 32
#define MAX_HITS 128

struct ViewDataEvalCompute
{
    vec4 frustumPlanes[6];
};

struct ViewEvalDebugCompute {
    vec4 frustumPlanes[6];
    int numOfIntersections;
    int numOfFoundIntervals;
};

struct IntervalHit {
    vec2 t;
    uint idBits[4];
};

struct FrustumHit
{
    float t;
    int viewId;
};

// struct RayFrustumHitsDataCompute
// {
//     vec2 t;
//     vec2 id;
//     int planeId;
// };

layout(set=0, binding=0) uniform MainViewDataCompute {
    mat4 invView;
    mat4 invProj;
    vec2 res;
    int viewCnt;
} ubo;

layout(std430, set=0, binding=1) readonly buffer ssbo {
    ViewDataEvalCompute objects[];
} cssbo;

layout(std430, set=0, binding=2) buffer ssbo1 {
    ViewEvalDebugCompute objects[];
} cssboDebug;


// layout(set=0, binding=2) buffer hSsbo {
//     RayFrustumHitsDataCompute objects[];
// } hitssbo;

layout (local_size_x=16, local_size_y=16, local_size_z=1) in;

vec2 calculateMaskId(float id)
{
    int maskId = int(floor(id / 32));
    int innermaskId = int(id) - (maskId * 32);

    return vec2(maskId, innermaskId);
}


void main()
{
    vec2 pixId = gl_GlobalInvocationID.xy;

    if (pixId.x <= ubo.res.x && pixId.y <= ubo.res.y)
    {
        FrustumHit frustumHitsIn[MAX_HITS];
        FrustumHit frustumHitsOut[MAX_HITS];

        int intersectCount = 0;

        vec2 pixCenter = pixId + 0.5;
        vec2 uv = pixCenter / ubo.res;

        vec2 d = uv * 2.0 - 1.0;

        vec4 org4f = ubo.invView * vec4(0.0, 0.0, 0.0, 1.0);
        vec4 target = ubo.invProj * vec4(d.x, d.y, 1.f, 1.f);
        vec4 dir4f = ubo.invView * vec4(normalize(target.xyz), 0.f);

        vec3 org = org4f.xyz;
        vec3 dir = dir4f.xyz;

        for (int i = 0; i < ubo.viewCnt; i++)
        {
            ViewDataEvalCompute currentView = cssbo.objects[i];

            float intersects[2];
            int foundIntersects = 0;

            for (int j = 0; j < 6; j++)
            {
                vec4 currentPlane = currentView.frustumPlanes[j];

                vec3 frustumNormal = currentPlane.xyz;
                float frustumDistance = currentPlane.w;

                if (abs(dot(frustumNormal, dir)) > 1e-6)
                {
                    float t = -(dot(frustumNormal, org) + frustumDistance) / dot(frustumNormal, dir);
                    vec3 intersect = org + t * dir;

                    bool valid = true;

                    if (t < 0)
                    {
                        valid = false;
                    }
                    else
                    {
                        for (int k = 0; k < 6; k++)
                        {
                            if (k != j)
                            {
                                vec4 checkPlane = currentView.frustumPlanes[k];

                                vec3 checkNormal = checkPlane.xyz;
                                float checkDistance = checkPlane.w;

                                if (dot(checkNormal, intersect) + checkDistance < 0.f)
                                {
                                    valid = false;
                                }
                            }
                        }
                    }

                    if (valid == true && foundIntersects < 2)
                    {
                        intersects[foundIntersects] = t;
                        foundIntersects++;
                    }
                }
            }

            if (foundIntersects == 2)
            {
                frustumHitsIn[intersectCount].viewId = i;
                frustumHitsOut[intersectCount].viewId = i;

                if (intersects[0] < intersects[1])
                {
                    frustumHitsIn[intersectCount].t = intersects[0];
                    frustumHitsOut[intersectCount].t = intersects[1];
                }
                else
                {
                    frustumHitsIn[intersectCount].t = intersects[1];
                    frustumHitsOut[intersectCount].t = intersects[0];
                }

                intersectCount++;
            }
        }

        // insert sort the intersections
        for (int i = 1; i < intersectCount; i++)
        {
            // hits in
            FrustumHit keyIn = frustumHitsIn[i];

            int j = i - 1;
            while (j >= 0 && frustumHitsIn[j].t > keyIn.t)
            {
                frustumHitsIn[j + 1] = frustumHitsIn[j];
                j = j - 1;
            }

            frustumHitsIn[j + 1] = keyIn;

            // hits out
            FrustumHit keyOut = frustumHitsOut[i];

            j = i - 1;
            while (j >= 0 && frustumHitsOut[j].t > keyOut.t)
            {
                frustumHitsOut[j + 1] = frustumHitsOut[j];
                j = j - 1;
            }

            frustumHitsOut[j + 1] = keyOut;
        }



        // 32 because 128 / 4 = 32 since we are looking for intervals
        // containing at least 4 cameras, then there are max 32 intervals
        IntervalHit intervals[MAX_INTERVALS];

        int currentlyInInterval = 0;
        uint cameraIndexMask[4];
        cameraIndexMask[0] = 0;
        cameraIndexMask[1] = 0;
        cameraIndexMask[2] = 0;
        cameraIndexMask[3] = 0;

        float currentStartT = 0;

        int foundIntervals = 0;
        int inId = 0;
        int outId = 0;
        for (int i = 0; i < intersectCount * 2; i++)
        {
            FrustumHit hitIn = frustumHitsIn[inId];
            FrustumHit hitOut = frustumHitsOut[outId];

            if (hitIn.t <= hitOut.t && inId < intersectCount)
            {
                // add into interval
                currentlyInInterval++;

                vec2 maskId = calculateMaskId(hitIn.viewId);
                int outer = int(maskId.x);
                int inner = int(maskId.y);

                cameraIndexMask[outer] = cameraIndexMask[outer] | (1 << inner);

                currentStartT = hitIn.t;

                inId++;
            }
            else
            {
                // remove from interval and possibly write interval
                if (currentlyInInterval >= 4)
                {
                    intervals[foundIntervals].t = vec2(currentStartT, hitOut.t);
                    intervals[foundIntervals].idBits = cameraIndexMask;

                    foundIntervals++;
                }

                vec2 maskId = calculateMaskId(hitOut.viewId);
                int outer = int(maskId.x);
                int inner = int(maskId.y);

                cameraIndexMask[outer] = cameraIndexMask[outer] & (~(1 << inner));

                // cycle until we find a previous value in the interval
                for (int j = inId; j >= 0; j--)
                {
                    FrustumHit prevHitIn = frustumHitsIn[j];
                    
                    if (prevHitIn.t == currentStartT && prevHitIn.viewId != hitOut.viewId)
                    {
                        break;
                    }
                    else if (prevHitIn.t == currentStartT && prevHitIn.viewId == hitOut.viewId)
                    {
                        continue;
                    }
                    else
                    {
                        vec2 prevMaskId = calculateMaskId(prevHitIn.viewId);
                        int prevOuter = int(maskId.x);
                        int prevInner = int(maskId.y);

                        uint prevIdNum = (1 << prevInner);
                        uint check = cameraIndexMask[prevOuter] & prevIdNum;

                        if (check == prevIdNum)
                        {
                            // it is in the interval
                            currentStartT = prevHitIn.t;
                            break;
                        }
                    }
                }

                outId++;
            }
        }

        int linearRes = int((ubo.res.x * pixId.y) + pixId.x);

        cssboDebug.objects[linearRes].numOfIntersections = foundIntervals;
        cssboDebug.objects[linearRes].numOfFoundIntervals = foundIntervals;
        
    }
}

// [0, 3], [1, 2]